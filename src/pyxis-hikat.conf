
INDIR = "../input"
#OUTDIR = "../output"
import psutil

define('NM', 2, 'Split data into NM measurement sets')

def ncores(nm=None):
    # Figure out how much CPU we can use
    nm = nm or NM
    ncpu = nm or CPUS
    cpus = psutil.cpu_count()
    n = int(0.6*(cpus - psutil.cpu_percent()/100*cpus))
    if ncpu>n:
        Pyxis.Context["JOBS"] = n
    else:
        Pyxis.Context["JOBS"] = ncpu

CFG = None

LSM_Template = '${INDIR}/example.fits' # sky model

OBSERVATORY = 'meerkat'
ANTENNAS = 'observatories/MeerKAT64_ANTENNAS'
DIRECTION = 'J2000,0h0m0s,-30d0m0s'
RECENTRE = True
COLUMN = 'CORRECTED_DATA'

im.IMAGER = imager.IMAGER = "wsclean"
im.stokes = "I" # Only Phenius and Ferb can handle polarization
im.mode = "channel"
im.IMAGE_CHANNELIZE = 1 # per channel imaging

SCAN = 0.25 # length of the uv-tracks
SYNTHESIS = 900000 # Noise will be scaled to match to this value
FREQ_CHUNKS = 500
MS_PREFIX = 'hi-inator'
SEFD = 551

v.DESTDIR = OUTDIR
OUTFILE_Template = '${OUTDIR>/}${MS:BASE}'

LOG_Template = '${OUTDIR>/}log-hisims.txt'

LSM_List = None
MS_List = None

DEFAULT_IMAGING_SETTINGS = True

# Keep track of images when spliting cube
PSFS_Template = '${OUTDIR>/}psflist.txt'
DIRTYS_Template = '${OUTDIR>/}dirtylist.txt'
MODELS_Template = '${OUTDIR>/}modellist.txt'
RESIDUALS_Template = '${OUTDIR>/}residuallist.txt'
CLEANS_Template = '${OUTDIR>/}cleanlist.txt'

LSMLIST_Template = '${OUTDIR>/}lsmlist.txt'
FULL_IMAGE_Template = '${OUTDIR>/hikat-full.restored.fits}'

define('MSOUT_Template', '$OUTDIR', 'MS output directory')
define('MS_REDO',False, 'Force MS reset')
define('SPWIDS', 1, 'Number of spectral windows')
